{
  "_from": "mongooseadmin",
  "_id": "mongooseadmin@1.0.5",
  "_inBundle": false,
  "_integrity": "sha1-VTNBVe0XaRsTyqBP+q/Hxo6AmP4=",
  "_location": "/mongooseadmin",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "mongooseadmin",
    "fetchSpec": "latest",
    "name": "mongooseadmin",
    "raw": "mongooseadmin",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongooseadmin/-/mongooseadmin-1.0.5.tgz",
  "_shasum": "55334155ed17691b13caa04ffaafc7c68e8098fe",
  "_shrinkwrap": null,
  "_spec": "mongooseadmin",
  "_where": "/Users/Manny/Documents/Side Projects/cloud-notes",
  "author": {
    "name": "Johnny Tsang"
  },
  "bugs": {
    "url": "https://github.com/Webura/mongooseadmin/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "mongooserest": "^1.0.9"
  },
  "deprecated": false,
  "description": "Minimalist admin page for Node.js projects using Mongoose and Express.js",
  "devDependencies": {
    "body-parser": "^1.13.1",
    "cookie-parser": "^1.3.5",
    "express": "^4.13.0",
    "mongoose": "^4.0.6"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/Webura/mongooseadmin#readme",
  "main": "index",
  "name": "mongooseadmin",
  "optionalDependencies": {},
  "readme": "MongooseAdmin\n=============\n\nMinimalist admin page for Node.js projects using Mongoose and Express.js.\n\n\nWhy\n---\nMain usage will be for small projects where you need an admin page for CRUD operations.\nJust add it as a middleware and use it.\nWhen your project grows and you have spent days to develop you own admin page, you can remove MongooseAdmin.\n\nScreenshots\n-----------\n![Screenshot](https://raw.githubusercontent.com/Webura/mongooseadmin/master/screenshots/login.png \"Screenshot\")\n![Screenshot](https://raw.githubusercontent.com/Webura/mongooseadmin/master/screenshots/mongooseadmin.png \"Screenshot\")\n\nWhat to expect\n--------------\n1. Create CRUD operations on the models defined in Mongoose\n2. Hook it in as a Express.js middleware.\n3. Options to change authentication etc.\n\n\nInstall\n-------\n`npm install mongooseadmin`\n\nHow to use\n----------\nBasic usage\n```\nvar mongooseadmin = require('mongooseadmin');\napp.use('/admin',mongooseadmin());\n```\n\nFor mongooseadmin to work properly a cookie parser (e.g. cookie-parser) an body parser (e.g. body-parser) for Express is needed.\n\nOptions\n-------\nYou can extend with options:\n\n```\nvar options = {\n    title: 'My awesome admin page';\n    }\napp.use('/admin', mongooseadmin(options));\n```\n\n### title\nChanges the page title. Default is 'mongooseadmin'.\n\n### authentication\nA function that takes the parameters username, password and callback.\nThe callback expects to receive a boolean value for if the username and password is valid. Example\n```\nvar options = {\n    authentication:\n        function (username, password, callback) {\n            callback(username == 'johndoe' && password == 'supersecret');\n        }\n};\n```\n\n### css\nAdd your own css file. Example:\n```\nvar options = {\n    css: '/public/myown.css'\n};\n```\n\n### js\nAdd your own javascript file. Example:\n```\nvar options = {\n    js: '/public/myown.js'\n};\n```\n\n### login\nAdd your own login url. Just add a FORM that post to your admin url with username and password. Example:\n```\nvar options = {\n    login: '/mylogin'\n};\n```\n\nLast modification\n-----------------\n*2015-01-12*\n\nAdded filters for referenced data.\n\n*2015-05-12*\n\nBetter support for sub documents.\n\n*2015-06-01*\n\nAdded read limit to only return first 10000 documents for performance concern.\n\n*2015-07-01 version 1.0.0*\n\nBreaking change: notice that the usage is `app.use('/admin',mongooseadmin());` instead of the old one `app.use(mongooseadmin('/admin'));`. \nThis means that it behaves like an Express router rather than a middleware.\n\nAdded npm package mongooserest and improved the readability of underlying code. \n\n\nNext steps\n----------\n- Add free text search filters\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2014 Johnny Tsang &lt;johnny@webura.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git+https://github.com/Webura/mongooseadmin.git"
  },
  "version": "1.0.5"
}
